-- Generated by Haxe 4.2.1
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

function _hx_error(obj)
    if obj.value then
        _G.print("runtime error:\n " .. _hx_tostring(obj.value));
    else
        _G.print("runtime error:\n " .. tostring(obj));
    end

    if _G.debug and _G.debug.traceback then
        _G.print(debug.traceback());
    end
end


local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    res = {}
    idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
__defold_support_Script = _hx_e()
local Chunk = _hx_e()
local Vector2Data = _hx_e()
local Face = _hx_e()
local Triangles = _hx_e()
local Wool = _hx_e()
local Normals = _hx_e()
local Math = _hx_e()
local Mover = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local World = _hx_e()
__defold_GoMessages = _hx_e()
__defold_support_Init = _hx_e()
__haxe_Log = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__hxnoise_Perlin = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g1 = 0;
  while (_g1 < a.length) do 
    local i = a[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  while (_g_current < self.length) do 
    _g_current = _g_current + 1;
    _G.table.insert(tbl, Std.string(self[_g_current - 1]));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  self.length = self.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do 
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    if (self[_g - 1] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

__defold_support_Script.new = function() 
  local self = _hx_new()
  __defold_support_Script.super(self)
  return self
end
__defold_support_Script.super = function(self) 
end

Chunk.new = function() 
  local self = _hx_new(Chunk.prototype)
  Chunk.super(self)
  return self
end
Chunk.super = function(self) 
  self.chunkSize = _hx_o({__fields__={x=true,y=true,z=true},x=16,y=16,z=16});
  self.blockSize = 1;
  __defold_support_Script.super(self);
end
Chunk.prototype = _hx_e();
Chunk.prototype.init = function(self,_self) 
  local perlin = __hxnoise_Perlin.new();
  _self.position = _G.vmath.vector3(_G.go.get_position());
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self.chunkSize.x;
  while (_g1 < _g2) do 
    _g1 = _g1 + 1;
    local x = _g1 - 1;
    local _g1 = _hx_tab_array({}, 0);
    local _g2 = 0;
    local _g3 = self.chunkSize.y;
    while (_g2 < _g3) do 
      _g2 = _g2 + 1;
      local y = _g2 - 1;
      local _g = _hx_tab_array({}, 0);
      local _g2 = 0;
      local _g3 = self.chunkSize.z;
      while (_g2 < _g3) do 
        _g2 = _g2 + 1;
        _g:push(_hx_o({__fields__={position=true,empty=true},position=_G.vmath.vector3(x, y, _g2 - 1),empty=true}));
      end;
      _g1:push(_g);
    end;
    _g:push(_g1);
  end;
  _self.blocks = _g;
  local _g = 0;
  local _g1 = self.chunkSize.x;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local _g = 0;
    local _g1 = self.chunkSize.z;
    while (_g < _g1) do 
      _g = _g + 1;
      local z = _g - 1;
      local dx = _self.position.x + x;
      local dz = _self.position.z + z;
      local p = perlin:perlin(dx * 0.0625, 0.3, dz * 0.0625);
      __haxe_Log.trace(x, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true,customParams=true},fileName="src/Chunk.hx",lineNumber=49,className="Chunk",methodName="init",customParams=_hx_tab_array({[0]=z, dx, dz, p}, 4)}));
      local _g = 0;
      local _g1 = self.chunkSize.y;
      while (_g < _g1) do 
        _g = _g + 1;
        local y = _g - 1;
        if ((y / self.chunkSize.y) >= p) then 
          break;
        end;
        _self.blocks[x][y][z].empty = false;
      end;
    end;
  end;
  _G.go.set("#mesh", "light", _G.vmath.vector4(0, 64, 0, 0));
  self:updateChunk(_self);
end
Chunk.prototype.updateChunk = function(self,_self) 
  _self.vertices = _hx_tab_array({}, 0);
  _self.normals = _hx_tab_array({}, 0);
  _self.uvs = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = self.chunkSize.x;
  while (_g < _g1) do 
    _g = _g + 1;
    local x = _g - 1;
    local _g = 0;
    local _g1 = self.chunkSize.y;
    while (_g < _g1) do 
      _g = _g + 1;
      local y = _g - 1;
      local _g = 0;
      local _g1 = self.chunkSize.z;
      local _hx_continue_3 = false;
      while (_g < _g1) do repeat 
        _g = _g + 1;
        local z = _g - 1;
        local block = _self.blocks[x][y][z];
        if (block.empty) then 
          break;
        end;
        local face = Face.Top;
        if (self:neighborIsEmpty(_self, block.position, face)) then 
          self:addVertices(_self, block.position, face);
        end;
        local face = Face.Bottom;
        if (self:neighborIsEmpty(_self, block.position, face)) then 
          self:addVertices(_self, block.position, face);
        end;
        local face = Face.Left;
        if (self:neighborIsEmpty(_self, block.position, face)) then 
          self:addVertices(_self, block.position, face);
        end;
        local face = Face.Right;
        if (self:neighborIsEmpty(_self, block.position, face)) then 
          self:addVertices(_self, block.position, face);
        end;
        local face = Face.Far;
        if (self:neighborIsEmpty(_self, block.position, face)) then 
          self:addVertices(_self, block.position, face);
        end;
        local face = Face.Near;
        if (self:neighborIsEmpty(_self, block.position, face)) then 
          self:addVertices(_self, block.position, face);
        end;until true
        if _hx_continue_3 then 
        _hx_continue_3 = false;
        break;
        end;
        
      end;
    end;
  end;
  local buf = _G.buffer.create(_self.vertices.length, {
      { name = hash("position"), type=buffer.VALUE_TYPE_FLOAT32, count = 3 },
      { name = hash("normal"), type=buffer.VALUE_TYPE_FLOAT32, count = 3 },
      { name = hash("texcoord0"), type=buffer.VALUE_TYPE_FLOAT32, count = 2 }
    });
  local pos = _G.buffer.get_stream(buf, "position");
  local nor = _G.buffer.get_stream(buf, "normal");
  local tex = _G.buffer.get_stream(buf, "texcoord0");
  local i = 1;
  local _g = 0;
  local _g1 = _self.vertices.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local j = _g - 1;
    pos[i] = _self.vertices[j].x;
    pos[i + 1] = _self.vertices[j].y;
    pos[i + 2] = _self.vertices[j].z;
    nor[i] = _self.normals[j].x;
    nor[i + 1] = _self.normals[j].y;
    nor[i + 2] = _self.normals[j].z;
    i = i + 3;
  end;
  local i = 1;
  local _g = 0;
  local _g1 = _self.uvs.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local j = _g - 1;
    tex[i] = _self.uvs[j].x;
    tex[i + 1] = _self.uvs[j].y;
    i = i + 2;
  end;
  local res = _G.go.get("#mesh", "vertices");
  _G.resource.set_buffer(res, buf);
end
Chunk.prototype.neighborIsEmpty = function(self,_self,position,face) 
  local p = _G.vmath.vector3(position.x, position.y, position.z);
  local tmp = face[1];
  if (tmp) == 1 then 
    p.y = p.y + 1;
  elseif (tmp) == 2 then 
    p.y = p.y - 1;
  elseif (tmp) == 3 then 
    p.x = p.x - 1;
  elseif (tmp) == 4 then 
    p.x = p.x + 1;
  elseif (tmp) == 5 then 
    p.z = p.z - 1;
  elseif (tmp) == 6 then 
    p.z = p.z + 1;else
  do return true end; end;
  if ((p.x < 0) or (p.x >= self.chunkSize.x)) then 
    do return false end;
  end;
  if ((p.y < 0) or (p.y >= self.chunkSize.y)) then 
    do return false end;
  end;
  if ((p.z < 0) or (p.z >= self.chunkSize.z)) then 
    do return false end;
  end;
  do return _self.blocks[p.x][p.y][p.z].empty end
end
Chunk.prototype.addVertices = function(self,_self,p,face) 
  local tri = _hx_tab_array({}, 0);
  local nor = _hx_tab_array({}, 0);
  local tex = nil;
  local tmp = face[1];
  if (tmp) == 1 then 
    tri = Triangles.Top;
    nor = Normals.Top;
    tex = Wool.Green;
  elseif (tmp) == 2 then 
    tri = Triangles.Bottom;
    nor = Normals.Bottom;
    tex = Wool.Brown;
  elseif (tmp) == 3 then 
    tri = Triangles.Left;
    nor = Normals.Left;
    tex = Wool.Brown;
  elseif (tmp) == 4 then 
    tri = Triangles.Right;
    nor = Normals.Right;
    tex = Wool.Brown;
  elseif (tmp) == 5 then 
    tri = Triangles.Far;
    nor = Normals.Far;
    tex = Wool.Brown;
  elseif (tmp) == 6 then 
    tri = Triangles.Near;
    nor = Normals.Near;
    tex = Wool.Brown;else end;
  local _g = 0;
  while (_g < tri.length) do 
    local v = tri[_g];
    _g = _g + 1;
    local _self = _self.vertices;
    local b = self.blockSize;
    local b = (v) * (b);
    _self:push((p) + (b));
  end;
  local _g = 0;
  while (_g < nor.length) do 
    local v = nor[_g];
    _g = _g + 1;
    _self.normals:push(v);
  end;
  local _g = 0;
  local _g1 = Wool.Shape;
  while (_g < _g1.length) do 
    local v = _g1[_g];
    _g = _g + 1;
    _self.uvs:push(Vector2Data.new(v.x + tex.x, v.y + tex.y));
  end;
end
Chunk.__super__ = __defold_support_Script
setmetatable(Chunk.prototype,{__index=__defold_support_Script.prototype})

Vector2Data.new = function(x,y) 
  local self = _hx_new()
  Vector2Data.super(self,x,y)
  return self
end
Vector2Data.super = function(self,x,y) 
  self.x = x;
  self.y = y;
end

Face.All = _hx_tab_array({[0]="All",0,__enum__ = Face},2)

Face.Top = _hx_tab_array({[0]="Top",1,__enum__ = Face},2)

Face.Bottom = _hx_tab_array({[0]="Bottom",2,__enum__ = Face},2)

Face.Left = _hx_tab_array({[0]="Left",3,__enum__ = Face},2)

Face.Right = _hx_tab_array({[0]="Right",4,__enum__ = Face},2)

Face.Far = _hx_tab_array({[0]="Far",5,__enum__ = Face},2)

Face.Near = _hx_tab_array({[0]="Near",6,__enum__ = Face},2)


Triangles.new = {}

Wool.new = {}

Normals.new = {}

Math.new = {}
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Mover.new = function() 
  local self = _hx_new(Mover.prototype)
  Mover.super(self)
  return self
end
Mover.super = function(self) 
  self.speed = 5;
  __defold_support_Script.super(self);
end
Mover.prototype = _hx_e();
Mover.prototype.init = function(self,_self) 
  _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
  _self.oPos = _G.go.get_position();
  _self.speed = _G.vmath.vector3();
end
Mover.prototype.update = function(self,_self,dt) 
  local p = _G.go.get_position();
  local a = _self.speed;
  local b = (a) * (dt);
  p = (p) + (b);
  _G.go.set_position(p);
  _self.speed = _G.vmath.vector3();
end
Mover.prototype.on_input = function(self,_self,action_id,action) 
  if (action_id == _G.hash("w")) then 
    local fh = _self.speed;
    fh.z = fh.z - self.speed;
  else
    if (action_id == _G.hash("a")) then 
      local fh = _self.speed;
      fh.x = fh.x - self.speed;
    else
      if (action_id == _G.hash("s")) then 
        local fh = _self.speed;
        fh.z = fh.z + self.speed;
      else
        if (action_id == _G.hash("d")) then 
          local fh = _self.speed;
          fh.x = fh.x + self.speed;
        else
          if (action_id == _G.hash("space")) then 
            local fh = _self.speed;
            fh.y = fh.y + self.speed;
          else
            if (action_id == _G.hash("shift")) then 
              local fh = _self.speed;
              fh.y = fh.y - self.speed;
            else
              if (action_id == _G.hash("esc")) then 
                _G.go.set_position(_self.oPos);
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  do return false end
end
Mover.__super__ = __defold_support_Script
setmetatable(Mover.prototype,{__index=__defold_support_Script.prototype})

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local p;
    if (str == "") then 
      p = String.indexOfEmpty(self, startIndex1 - 1);
    else
      local r = _G.string.find(self, str, startIndex1, true);
      p = (function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )();
    end;
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      ret:push(_G.string.sub(self, idx, newidx - 1));
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

Std.new = {}
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

World.new = function() 
  local self = _hx_new(World.prototype)
  World.super(self)
  return self
end
World.super = function(self) 
  self.chunkSize = _G.vmath.vector3(16, 16, 16);
  __defold_support_Script.super(self);
end
World.prototype = _hx_e();
World.prototype.init = function(self,_self) 
  local this1 = _G.vmath.vector3(0 * self.chunkSize.x, 0, 0 * self.chunkSize.z);
  _G.factory.create("#chunkFactory", _G.vmath.vector3(this1.x, this1.y, this1.z));
  local this1 = _G.vmath.vector3(self.chunkSize.x, 0, 0 * self.chunkSize.z);
  _G.factory.create("#chunkFactory", _G.vmath.vector3(this1.x, this1.y, this1.z));
  local this1 = _G.vmath.vector3(2 * self.chunkSize.x, 0, 0 * self.chunkSize.z);
  _G.factory.create("#chunkFactory", _G.vmath.vector3(this1.x, this1.y, this1.z));
end
World.prototype.update = function(self,_self,dt) 
end
World.prototype.on_input = function(self,_self,action_id,action) 
  do return false end
end
World.__super__ = __defold_support_Script
setmetatable(World.prototype,{__index=__defold_support_Script.prototype})

__defold_GoMessages.new = {}

__defold_support_Init.new = {}
__defold_support_Init.init = function(exports) 
  local script = World.new();
  exports.World_init = function(_self) 
    script:init(_self);
  end;
  exports.World_update = function(_self,dt) 
    script:update(_self, dt);
  end;
  exports.World_on_input = function(_self,action_id,action) 
    do return script:on_input(_self, action_id, action) end;
  end;
  local script = Chunk.new();
  exports.Chunk_init = function(_self) 
    script:init(_self);
  end;
  local script = Mover.new();
  exports.Mover_init = function(_self) 
    script:init(_self);
  end;
  exports.Mover_update = function(_self,dt) 
    script:update(_self, dt);
  end;
  exports.Mover_on_input = function(_self,action_id,action) 
    do return script:on_input(_self, action_id, action) end;
  end;
end

__haxe_Log.new = {}
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new()
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end

__hxnoise_Perlin.new = function(_repeat) 
  local self = _hx_new(__hxnoise_Perlin.prototype)
  __hxnoise_Perlin.super(self,_repeat)
  return self
end
__hxnoise_Perlin.super = function(self,_repeat) 
  if (_repeat == nil) then 
    _repeat = -1;
  end;
  self["repeat"] = _repeat;
  if (__hxnoise_Perlin.P == nil) then 
    local _g = _hx_tab_array({}, 0);
    local _g1 = 0;
    while (_g1 < 512) do 
      _g1 = _g1 + 1;
      _g:push(__hxnoise_Perlin.PERMUTATIONS[_G.math.fmod((_g1 - 1), 256)]);
    end;
    __hxnoise_Perlin.P = _g;
  end;
end
__hxnoise_Perlin.grad = function(hash,x,y,z) 
  local h = _hx_bit.band(hash,15);
  local u = (function() 
    local _hx_1
    if (h < 8) then 
    _hx_1 = x; else 
    _hx_1 = y; end
    return _hx_1
  end )();
  local v;
  if (h < 4) then 
    v = y;
  else
    if ((h == 12) or (h == 14)) then 
      v = x;
    else
      v = z;
    end;
  end;
  do return (function() 
    local _hx_2
    if ((_hx_bit.band(h,1)) == 0) then 
    _hx_2 = u; else 
    _hx_2 = -u; end
    return _hx_2
  end )() + (function() 
    local _hx_3
    if ((_hx_bit.band(h,2)) == 0) then 
    _hx_3 = v; else 
    _hx_3 = -v; end
    return _hx_3
  end )() end;
end
__hxnoise_Perlin.prototype = _hx_e();
__hxnoise_Perlin.prototype.perlin = function(self,x,y,z) 
  if (self["repeat"] > 0) then 
    x = _G.math.fmod(x, self["repeat"]);
    y = _G.math.fmod(y, self["repeat"]);
    z = _G.math.fmod(z, self["repeat"]);
  end;
  local xi = _hx_bit.band(_G.math.floor(x),255);
  local yi = _hx_bit.band(_G.math.floor(y),255);
  local zi = _hx_bit.band(_G.math.floor(z),255);
  local xf = x - _G.math.floor(x);
  local yf = y - _G.math.floor(y);
  local zf = z - _G.math.floor(z);
  local u = self:fade(xf);
  local v = self:fade(yf);
  local w = self:fade(zf);
  local aaa = __hxnoise_Perlin.P[__hxnoise_Perlin.P[__hxnoise_Perlin.P[xi] + yi] + zi];
  local aba = __hxnoise_Perlin.P[__hxnoise_Perlin.P[__hxnoise_Perlin.P[xi] + self:inc(yi)] + zi];
  local aab = __hxnoise_Perlin.P[__hxnoise_Perlin.P[__hxnoise_Perlin.P[xi] + yi] + self:inc(zi)];
  local abb = __hxnoise_Perlin.P[__hxnoise_Perlin.P[__hxnoise_Perlin.P[xi] + self:inc(yi)] + self:inc(zi)];
  local baa = __hxnoise_Perlin.P[__hxnoise_Perlin.P[__hxnoise_Perlin.P[self:inc(xi)] + yi] + zi];
  local bba = __hxnoise_Perlin.P[__hxnoise_Perlin.P[__hxnoise_Perlin.P[self:inc(xi)] + self:inc(yi)] + zi];
  local bab = __hxnoise_Perlin.P[__hxnoise_Perlin.P[__hxnoise_Perlin.P[self:inc(xi)] + yi] + self:inc(zi)];
  local bbb = __hxnoise_Perlin.P[__hxnoise_Perlin.P[__hxnoise_Perlin.P[self:inc(xi)] + self:inc(yi)] + self:inc(zi)];
  local x1 = self:lerp(__hxnoise_Perlin.grad(aaa, xf, yf, zf), __hxnoise_Perlin.grad(baa, xf - 1, yf, zf), u);
  local x2 = self:lerp(__hxnoise_Perlin.grad(aba, xf, yf - 1, zf), __hxnoise_Perlin.grad(bba, xf - 1, yf - 1, zf), u);
  local y1 = self:lerp(x1, x2, v);
  x1 = self:lerp(__hxnoise_Perlin.grad(aab, xf, yf, zf - 1), __hxnoise_Perlin.grad(bab, xf - 1, yf, zf - 1), u);
  x2 = self:lerp(__hxnoise_Perlin.grad(abb, xf, yf - 1, zf - 1), __hxnoise_Perlin.grad(bbb, xf - 1, yf - 1, zf - 1), u);
  do return (self:lerp(y1, self:lerp(x1, x2, v), w) + 1) / 2 end
end
__hxnoise_Perlin.prototype.fade = function(self,t) 
  do return ((t * t) * t) * ((t * ((t * 6) - 15)) + 10) end
end
__hxnoise_Perlin.prototype.inc = function(self,num) 
  num = num + 1;
  if (self["repeat"] > 0) then 
    num = _G.math.fmod(num, self["repeat"]);
  end;
  do return num end
end
__hxnoise_Perlin.prototype.lerp = function(self,a,b,x) 
  do return a + (x * (b - a)) end
end
-- require this for lua 5.1
pcall(require, 'bit')
if bit then
  _hx_bit_raw = bit
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
else
  _hx_bit_raw = _G.require('bit32')
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  -- lua 5.2 weirdness
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
end
-- see https://github.com/HaxeFoundation/haxe/issues/8849
_hx_bit.bor = function(...) return _hx_bit_clamp(_hx_bit_raw.bor(...)) end;
_hx_bit.band = function(...) return _hx_bit_clamp(_hx_bit_raw.band(...)) end;
_hx_bit.arshift = function(...) return _hx_bit_clamp(_hx_bit_raw.arshift(...)) end;

if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  
  _hxdefold_ = _hxdefold_ or {}
  __defold_support_Init.init(_hxdefold_);Triangles.Top = _hx_tab_array({[0]=_G.vmath.vector3(0, 1, 0), _G.vmath.vector3(0, 1, 1), _G.vmath.vector3(1, 1, 1), _G.vmath.vector3(0, 1, 0), _G.vmath.vector3(1, 1, 1), _G.vmath.vector3(1, 1, 0)}, 6);
  
  Triangles.Bottom = _hx_tab_array({[0]=_G.vmath.vector3(0, 0, 0), _G.vmath.vector3(1, 0, 1), _G.vmath.vector3(0, 0, 1), _G.vmath.vector3(0, 0, 0), _G.vmath.vector3(1, 0, 0), _G.vmath.vector3(1, 0, 1)}, 6);
  
  Triangles.Left = _hx_tab_array({[0]=_G.vmath.vector3(0, 0, 0), _G.vmath.vector3(0, 0, 1), _G.vmath.vector3(0, 1, 1), _G.vmath.vector3(0, 0, 0), _G.vmath.vector3(0, 1, 1), _G.vmath.vector3(0, 1, 0)}, 6);
  
  Triangles.Right = _hx_tab_array({[0]=_G.vmath.vector3(1, 0, 0), _G.vmath.vector3(1, 1, 0), _G.vmath.vector3(1, 1, 1), _G.vmath.vector3(1, 0, 0), _G.vmath.vector3(1, 1, 1), _G.vmath.vector3(1, 0, 1)}, 6);
  
  Triangles.Near = _hx_tab_array({[0]=_G.vmath.vector3(0, 0, 1), _G.vmath.vector3(1, 0, 1), _G.vmath.vector3(1, 1, 1), _G.vmath.vector3(0, 0, 1), _G.vmath.vector3(1, 1, 1), _G.vmath.vector3(0, 1, 1)}, 6);
  
  Triangles.Far = _hx_tab_array({[0]=_G.vmath.vector3(0, 0, 0), _G.vmath.vector3(0, 1, 0), _G.vmath.vector3(1, 1, 0), _G.vmath.vector3(0, 0, 0), _G.vmath.vector3(1, 1, 0), _G.vmath.vector3(1, 0, 0)}, 6);
  
  Wool.Brown = Vector2Data.new(0, 0.5);
  
  Wool.Green = Vector2Data.new(0.5, 0.75);
  
  Wool.Shape = _hx_tab_array({[0]=Vector2Data.new(0, 0), Vector2Data.new(0, 0.25), Vector2Data.new(0.25, 0.25), Vector2Data.new(0, 0), Vector2Data.new(0.25, 0.25), Vector2Data.new(0.25, 0)}, 6);
  
  Normals.Top = (function() 
    local _hx_1
    
    local _g = _hx_tab_array({}, 0);
    
    _g:push(_G.vmath.vector3(0, 1, 0));
    _g:push(_G.vmath.vector3(0, 1, 0));
    _g:push(_G.vmath.vector3(0, 1, 0));
    _g:push(_G.vmath.vector3(0, 1, 0));
    _g:push(_G.vmath.vector3(0, 1, 0));
    _g:push(_G.vmath.vector3(0, 1, 0));
    
    _hx_1 = _g;
    return _hx_1
  end )();
  
  Normals.Bottom = (function() 
    local _hx_2
    
    local _g = _hx_tab_array({}, 0);
    
    _g:push(_G.vmath.vector3(0, -1, 0));
    _g:push(_G.vmath.vector3(0, -1, 0));
    _g:push(_G.vmath.vector3(0, -1, 0));
    _g:push(_G.vmath.vector3(0, -1, 0));
    _g:push(_G.vmath.vector3(0, -1, 0));
    _g:push(_G.vmath.vector3(0, -1, 0));
    
    _hx_2 = _g;
    return _hx_2
  end )();
  
  Normals.Left = (function() 
    local _hx_3
    
    local _g = _hx_tab_array({}, 0);
    
    _g:push(_G.vmath.vector3(-1, 0, 0));
    _g:push(_G.vmath.vector3(-1, 0, 0));
    _g:push(_G.vmath.vector3(-1, 0, 0));
    _g:push(_G.vmath.vector3(-1, 0, 0));
    _g:push(_G.vmath.vector3(-1, 0, 0));
    _g:push(_G.vmath.vector3(-1, 0, 0));
    
    _hx_3 = _g;
    return _hx_3
  end )();
  
  Normals.Right = (function() 
    local _hx_4
    
    local _g = _hx_tab_array({}, 0);
    
    _g:push(_G.vmath.vector3(1, 0, 0));
    _g:push(_G.vmath.vector3(1, 0, 0));
    _g:push(_G.vmath.vector3(1, 0, 0));
    _g:push(_G.vmath.vector3(1, 0, 0));
    _g:push(_G.vmath.vector3(1, 0, 0));
    _g:push(_G.vmath.vector3(1, 0, 0));
    
    _hx_4 = _g;
    return _hx_4
  end )();
  
  Normals.Near = (function() 
    local _hx_5
    
    local _g = _hx_tab_array({}, 0);
    
    _g:push(_G.vmath.vector3(0, 0, -1));
    _g:push(_G.vmath.vector3(0, 0, -1));
    _g:push(_G.vmath.vector3(0, 0, -1));
    _g:push(_G.vmath.vector3(0, 0, -1));
    _g:push(_G.vmath.vector3(0, 0, -1));
    _g:push(_G.vmath.vector3(0, 0, -1));
    
    _hx_5 = _g;
    return _hx_5
  end )();
  
  Normals.Far = (function() 
    local _hx_6
    
    local _g = _hx_tab_array({}, 0);
    
    _g:push(_G.vmath.vector3(0, 0, 1));
    _g:push(_G.vmath.vector3(0, 0, 1));
    _g:push(_G.vmath.vector3(0, 0, 1));
    _g:push(_G.vmath.vector3(0, 0, 1));
    _g:push(_G.vmath.vector3(0, 0, 1));
    _g:push(_G.vmath.vector3(0, 0, 1));
    
    _hx_6 = _g;
    return _hx_6
  end )();
  
  __defold_GoMessages.acquire_input_focus = _G.hash("acquire_input_focus");
  
  __hxnoise_Perlin.PERMUTATIONS = _hx_tab_array({[0]=151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180}, 256);
  
  
end

_hx_print = print or (function() end)

_hx_static_init();
